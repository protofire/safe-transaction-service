# Generated by Django 5.0.13 on 2024-07-19 16:03

from django.db import migrations


# Forward SQL: Create the index concurrently to avoid locking
# We target the actual table name (history_saferelevanttransaction)
# and use specific column names (timestamp, id)
SQL_CREATE_INDEX = """
CREATE INDEX CONCURRENTLY IF NOT EXISTS feed_srt_ts_id_idx 
ON history_saferelevanttransaction (timestamp, id);
"""

# Reverse SQL: Drop the index if the migration is reversed
SQL_DROP_INDEX = """
DROP INDEX CONCURRENTLY IF EXISTS feed_srt_ts_id_idx;
"""


class Migration(migrations.Migration):
    # Disable transactions for this migration because CREATE INDEX CONCURRENTLY
    # cannot run inside a transaction block in PostgreSQL.
    atomic = False

    # No initial=True as it's not the very first migration for the database

    dependencies = [
        # Depend on the history migration that creates the SafeRelevantTransaction model
        # Assuming 0086 is the correct one based on previous migrate output
        ('history', '0086_saferelevanttransaction'),
    ]

    operations = [
        migrations.RunSQL(
            sql=SQL_CREATE_INDEX,
            reverse_sql=SQL_DROP_INDEX,
            # We mark this as not affecting the Django model state for history.SafeRelevantTransaction
            # because we are deliberately bypassing the standard AddIndex operation.
            state_operations=[],
        )
    ]
